// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ============ CORE MASTER DATA ============

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  password  String? // hashed
  role      String     @default("staff") // admin, manager, staff, pos_operator
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  orders    PosOrder[]
  transfers StockTransfer[]
  productionOrders ProductionOrder[]
}

// ============ INVENTORY MASTER ============

model Warehouse {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  type      String   @default("storage") // storage, kitchen, buffet, fridge, minibar
  createdAt DateTime @default(now())

  batches         StockBatch[]
  transfers       StockTransfer[]
  ledger          StockLedger[]
  stockCounts     StockCount[]
}

model Item {
  id        String   @id @default(cuid())
  sku       String   @unique
  name      String   // e.g., "دجاج مشوي" (Grilled Chicken)
  category  String   // e.g., "لحوم" (Meat), "مشروبات" (Beverages)
  type      String   @default("finished_good") // raw_material, finished_good, packaging
  baseUom   String   // e.g., "kg", "liter", "piece"
  createdAt DateTime @default(now())

  pricing           ItemPrice[]
  batchLines        StockBatch[]
  ledger            StockLedger[]
  recipeLines       RecipeLine[]
  posOrderItems     PosOrderItem[]
  productionOutputs ProductionOutput[]
  productionInputs  ProductionConsumption[]
  purchaseOrderLines PurchaseOrderLine[]
}

model ItemPrice {
  id        String   @id @default(cuid())
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  currency  String   @default("EGP")
  salePrice Decimal  @db.Decimal(12, 2)
  costPrice Decimal  @db.Decimal(12, 2)
  taxRate   Decimal  @db.Decimal(5, 2) @default(0) // percentage
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StockBatch {
  id          String   @id @default(cuid())
  itemId      String
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  
  lotNumber   String?
  expiryDate  DateTime?
  receivedAt  DateTime @default(now())
  qtyOnHand   Decimal  @db.Decimal(16, 4) @default(0)
  
  costPrice   Decimal  @db.Decimal(12, 2) // FIFO/FEFO cost tracking
  createdAt   DateTime @default(now())

  ledgerLines StockLedger[]
}

model StockLedger {
  id          String   @id @default(cuid())
  itemId      String
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  
  batchId     String?
  batch       StockBatch? @relation(fields: [batchId], references: [id], onDelete: SetNull)
  
  movementType String  // in, out, adjust, transfer, production_input, production_output, return
  reference    String? // GRN_ID, TRANSFER_ID, ORDER_ID, etc.
  qty          Decimal @db.Decimal(16, 4)
  costAmount   Decimal @db.Decimal(16, 2) @default(0)
  
  createdAt    DateTime @default(now())
}

// ============ PURCHASING & GRN ============

model Supplier {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String   // e.g., "السوق المحلي" (Local Market)
  contact   String?
  createdAt DateTime @default(now())

  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id          String   @id @default(cuid())
  poNumber    String   @unique
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  
  status      String   @default("draft") // draft, submitted, posted, cancelled
  poDate      DateTime @default(now())
  expectedDate DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lines       PurchaseOrderLine[]
  grn         GoodsReceiptNote?
}

model PurchaseOrderLine {
  id          String   @id @default(cuid())
  poId        String
  po          PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  
  itemId      String
  item        Item     @relation(fields: [itemId], references: [id])
  
  qty         Decimal  @db.Decimal(16, 4)
  unitPrice   Decimal  @db.Decimal(12, 2)
  totalAmount Decimal  @db.Decimal(16, 2)
  
  createdAt   DateTime @default(now())
}

model GoodsReceiptNote {
  id          String   @id @default(cuid())
  grnNumber   String   @unique
  poId        String   @unique
  po          PurchaseOrder @relation(fields: [poId], references: [id])
  
  warehouseId String
  status      String   @default("draft") // draft, posted, cancelled
  grnDate     DateTime @default(now())
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lines       GoodsReceiptLine[]
}

model GoodsReceiptLine {
  id          String   @id @default(cuid())
  grnId       String
  grn         GoodsReceiptNote @relation(fields: [grnId], references: [id], onDelete: Cascade)
  
  itemId      String
  poLineId    String?
  
  qtyReceived Decimal  @db.Decimal(16, 4)
  lotNumber   String?
  expiryDate  DateTime?
  costPrice   Decimal  @db.Decimal(12, 2)
  
  createdAt   DateTime @default(now())
}

// ============ RECIPES & PRODUCTION ============

model Recipe {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String   // e.g., "وجبة مشكلة" (Mixed Plate)
  description String?
  yieldQty    Decimal  @db.Decimal(16, 4) @default(1)
  yieldUom    String   @default("piece")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lines       RecipeLine[]
  productionOrders ProductionOrder[]
}

model RecipeLine {
  id        String   @id @default(cuid())
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  
  qty       Decimal  @db.Decimal(16, 4)
  uom       String
  
  createdAt DateTime @default(now())
}

model ProductionOrder {
  id        String   @id @default(cuid())
  poNumber  String   @unique
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  plannedQty Decimal @db.Decimal(16, 4)
  actualQty  Decimal @db.Decimal(16, 4) @default(0)
  status     String  @default("draft") // draft, released, in_progress, completed
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  consumptions ProductionConsumption[]
  outputs      ProductionOutput[]
}

model ProductionConsumption {
  id              String   @id @default(cuid())
  productionOrderId String
  productionOrder ProductionOrder @relation(fields: [productionOrderId], references: [id], onDelete: Cascade)
  
  itemId          String
  item            Item     @relation(fields: [itemId], references: [id])
  
  qty             Decimal  @db.Decimal(16, 4)
  createdAt       DateTime @default(now())
}

model ProductionOutput {
  id              String   @id @default(cuid())
  productionOrderId String
  productionOrder ProductionOrder @relation(fields: [productionOrderId], references: [id], onDelete: Cascade)
  
  itemId          String
  item            Item     @relation(fields: [itemId], references: [id])
  
  qty             Decimal  @db.Decimal(16, 4)
  createdAt       DateTime @default(now())
}

// ============ STOCK TRANSFERS ============

model StockTransfer {
  id          String   @id @default(cuid())
  transferNumber String @unique
  
  fromWarehouseId String
  fromWarehouse   Warehouse @relation(fields: [fromWarehouseId], references: [id])
  
  toWarehouseId String
  // Note: relationships limited by Prisma (one-to-many per relation)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  status      String   @default("draft") // draft, approved, picked, in_transit, received, closed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lines       StockTransferLine[]
}

model StockTransferLine {
  id          String   @id @default(cuid())
  transferId  String
  transfer    StockTransfer @relation(fields: [transferId], references: [id], onDelete: Cascade)
  
  itemId      String
  qty         Decimal @db.Decimal(16, 4)
  
  createdAt   DateTime @default(now())
}

// ============ STOCK COUNTS (AUDITS) ============

model StockCount {
  id          String   @id @default(cuid())
  countNumber String   @unique
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  
  status      String   @default("scheduled") // scheduled, counting, review, approved, posted
  countDate   DateTime @default(now())
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lines       StockCountLine[]
}

model StockCountLine {
  id          String   @id @default(cuid())
  countId     String
  count       StockCount @relation(fields: [countId], references: [id], onDelete: Cascade)
  
  warehouseId String
  
  itemId      String
  physical    Decimal @db.Decimal(16, 4) // physically counted
  system      Decimal @db.Decimal(16, 4) // system balance
  
  createdAt   DateTime @default(now())
}

// ============ POS & SALES ============

model Tax {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String   // e.g., "ضريبة المبيعات" (Sales Tax)
  rate      Decimal  @db.Decimal(5, 2)
  createdAt DateTime @default(now())
}

model PosOrder {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  type        String   // dine_in, takeaway, delivery
  status      String   @default("open") // open, parked, paid, cancelled
  source      String   @default("pos") // pos, mobile, api
  
  subtotal    Decimal  @db.Decimal(16, 2) @default(0)
  taxAmount   Decimal  @db.Decimal(16, 2) @default(0)
  discountAmount Decimal @db.Decimal(16, 2) @default(0)
  total       Decimal  @db.Decimal(16, 2) @default(0)
  
  customerName String?
  customerPhone String?
  
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paidAt      DateTime?

  items       PosOrderItem[]
  payments    Payment[]
  invoice     Invoice?
}

model PosOrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     PosOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  
  qty       Decimal  @db.Decimal(16, 4)
  unitPrice Decimal  @db.Decimal(12, 2)
  taxRate   Decimal  @db.Decimal(5, 2) @default(0)
  discount  Decimal  @db.Decimal(16, 2) @default(0)
  lineTotal Decimal  @db.Decimal(16, 2)
  
  createdAt DateTime @default(now())
}

model Payment {
  id        String   @id @default(cuid())
  orderId   String
  order     PosOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  method    String   // cash, card, room_charge, check
  amount    Decimal  @db.Decimal(16, 2)
  reference String?  // transaction ID, room number, etc.
  
  createdAt DateTime @default(now())
}

model Invoice {
  id        String   @id @default(cuid())
  orderId   String   @unique
  order     PosOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  invoiceNumber String @unique
  etaStatus String  @default("draft") // draft, submitted, verified, rejected
  etaUuid   String?
  qrCode    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============ DINE-IN TABLES ============

model TableArea {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String   // e.g., "القاعة الرئيسية" (Main Hall)
  createdAt DateTime @default(now())

  tables    DineInTable[]
}

model DineInTable {
  id        String   @id @default(cuid())
  tableNumber Int
  areaId    String
  area      TableArea @relation(fields: [areaId], references: [id])
  
  capacity  Int      @default(4)
  status    String   @default("free") // free, occupied, reserved, dirty, hold
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([areaId, tableNumber])
}

// ============ HOTEL INTEGRATION ============

model HotelRoom {
  id        String   @id @default(cuid())
  roomNumber String @unique
  floor     Int
  category  String   // standard, deluxe, suite
  status    String   @default("available") // available, occupied, maintenance
  createdAt DateTime @default(now())

  folios    Folio[]
}

model Folio {
  id        String   @id @default(cuid())
  roomId    String
  room      HotelRoom @relation(fields: [roomId], references: [id])
  
  guestName String
  checkIn   DateTime
  checkOut  DateTime?
  status    String   @default("open") // open, closed
  
  balance   Decimal  @db.Decimal(16, 2) @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  charges   RoomCharge[]
}

model RoomCharge {
  id        String   @id @default(cuid())
  folioId   String
  folio     Folio    @relation(fields: [folioId], references: [id], onDelete: Cascade)
  
  description String
  amount    Decimal  @db.Decimal(16, 2)
  category  String   // minibar, dining, laundry, etc.
  
  createdAt DateTime @default(now())
}

// ============ DELIVERY ============

model Driver {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String   // e.g., "محمد عبده" (Mohammad Abdo)
  phone     String
  vehicleType String?  // motorcycle, car, bicycle
  vehicleNumber String?
  status    String   @default("available") // available, busy, offline
  createdAt DateTime @default(now())

  deliveries DeliveryOrder[]
}

model DeliveryArea {
  id            String   @id @default(cuid())
  code          String   @unique
  name          String   // e.g., "المعادي"
  deliveryFee   Decimal  @db.Decimal(10, 2)
  estimatedTime Int      // in minutes
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  orders DeliveryOrder[]
}

model DeliveryOrder {
  id        String   @id @default(cuid())
  orderNumber String @unique
  
  driverId  String?
  driver    Driver?  @relation(fields: [driverId], references: [id], onDelete: SetNull)
  
  areaId    String?
  area      DeliveryArea? @relation(fields: [areaId], references: [id], onDelete: SetNull)
  
  customerName String
  customerPhone String
  deliveryAddress String
  deliveryFee Decimal  @db.Decimal(10, 2) @default(0)
  
  status    String   @default("unassigned") // unassigned, assigned, picked, on_way, delivered, failed
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============ AUDIT & SYNC ============

model SyncQueue {
  id            String   @id @default(cuid())
  idempotencyKey String  @unique // for deduplication
  operation     String   // create_order, create_transfer, etc.
  entityId      String?
  entityType    String?
  
  payload       Json
  status        String   @default("pending") // pending, synced, failed
  retryCount    Int      @default(0)
  
  createdAt     DateTime @default(now())
  processedAt   DateTime?
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // created, updated, deleted
  entity    String   // Order, Transfer, etc.
  entityId  String
  
  oldValues Json?
  newValues Json?
  
  createdAt DateTime @default(now())
}

// ============ SYSTEM SETTINGS ============

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique // business_info, tax_config, system_config, notification_config
  value     Json     // stores the configuration as JSON
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
