generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id        String   @id
  userId    String?
  action    String
  entity    String
  entityId  String
  oldValues Json?
  newValues Json?
  createdAt DateTime @default(now())
}

model DeliveryArea {
  id            String          @id
  code          String          @unique
  name          String
  deliveryFee   Decimal         @db.Decimal(10, 2)
  estimatedTime Int
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  DeliveryOrder DeliveryOrder[]
}

model DeliveryOrder {
  id              String        @id
  orderNumber     String        @unique
  driverId        String?
  customerName    String
  customerPhone   String
  deliveryAddress String
  status          String        @default("unassigned")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  areaId          String?
  deliveryFee     Decimal       @default(0) @db.Decimal(10, 2)
  DeliveryArea    DeliveryArea? @relation(fields: [areaId], references: [id])
  Driver          Driver?       @relation(fields: [driverId], references: [id])
}

model DineInTable {
  id          String    @id
  tableNumber Int
  areaId      String
  capacity    Int       @default(4)
  status      String    @default("free")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  TableArea   TableArea @relation(fields: [areaId], references: [id])

  @@unique([areaId, tableNumber])
}

model Driver {
  id            String          @id
  code          String          @unique
  name          String
  phone         String
  status        String          @default("available")
  createdAt     DateTime        @default(now())
  vehicleNumber String?
  vehicleType   String?
  DeliveryOrder DeliveryOrder[]
}

model Folio {
  id         String       @id
  roomId     String
  guestName  String
  checkIn    DateTime
  checkOut   DateTime?
  status     String       @default("open")
  balance    Decimal      @default(0) @db.Decimal(16, 2)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  HotelRoom  HotelRoom    @relation(fields: [roomId], references: [id])
  RoomCharge RoomCharge[]
}

model GoodsReceiptLine {
  id               String           @id
  grnId            String
  itemId           String
  poLineId         String?
  qtyReceived      Decimal          @db.Decimal(16, 4)
  lotNumber        String?
  expiryDate       DateTime?
  costPrice        Decimal          @db.Decimal(12, 2)
  createdAt        DateTime         @default(now())
  GoodsReceiptNote GoodsReceiptNote @relation(fields: [grnId], references: [id], onDelete: Cascade)
}

model GoodsReceiptNote {
  id               String             @id
  grnNumber        String             @unique
  poId             String?            @unique
  warehouseId      String
  status           String             @default("draft")
  grnDate          DateTime           @default(now())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  GoodsReceiptLine GoodsReceiptLine[]
  PurchaseOrder    PurchaseOrder?     @relation(fields: [poId], references: [id])
}

model HotelRoom {
  id         String   @id
  roomNumber String   @unique
  floor      Int
  category   String
  status     String   @default("available")
  createdAt  DateTime @default(now())
  Folio      Folio[]
}

model Invoice {
  id            String   @id
  orderId       String   @unique
  invoiceNumber String   @unique
  etaStatus     String   @default("draft")
  etaUuid       String?
  qrCode        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  PosOrder      PosOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Item {
  id                    String                  @id
  sku                   String                  @unique
  name                  String
  category              String
  type                  String                  @default("finished_good")
  baseUom               String
  createdAt             DateTime                @default(now())
  ItemPrice             ItemPrice[]
  PosOrderItem          PosOrderItem[]
  ProductionConsumption ProductionConsumption[]
  ProductionOutput      ProductionOutput[]
  PurchaseOrderLine     PurchaseOrderLine[]
  RecipeLine            RecipeLine[]
  StockBatch            StockBatch[]
  StockLedger           StockLedger[]
}

model ItemPrice {
  id        String   @id
  itemId    String
  currency  String   @default("EGP")
  salePrice Decimal  @db.Decimal(12, 2)
  costPrice Decimal  @db.Decimal(12, 2)
  taxRate   Decimal  @default(0) @db.Decimal(5, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String   @id
  orderId   String
  method    String
  amount    Decimal  @db.Decimal(16, 2)
  reference String?
  createdAt DateTime @default(now())
  PosOrder  PosOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model PosOrder {
  id             String         @id
  orderNumber    String         @unique
  userId         String?
  type           String
  status         String         @default("open")
  source         String         @default("pos")
  subtotal       Decimal        @default(0) @db.Decimal(16, 2)
  taxAmount      Decimal        @default(0) @db.Decimal(16, 2)
  discountAmount Decimal        @default(0) @db.Decimal(16, 2)
  total          Decimal        @default(0) @db.Decimal(16, 2)
  customerName   String?
  customerPhone  String?
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  paidAt         DateTime?
  Invoice        Invoice?
  Payment        Payment[]
  User           User?          @relation(fields: [userId], references: [id])
  PosOrderItem   PosOrderItem[]
}

model PosOrderItem {
  id        String   @id
  orderId   String
  itemId    String
  qty       Decimal  @db.Decimal(16, 4)
  unitPrice Decimal  @db.Decimal(12, 2)
  taxRate   Decimal  @default(0) @db.Decimal(5, 2)
  discount  Decimal  @default(0) @db.Decimal(16, 2)
  lineTotal Decimal  @db.Decimal(16, 2)
  createdAt DateTime @default(now())
  Item      Item     @relation(fields: [itemId], references: [id])
  PosOrder  PosOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ProductionConsumption {
  id                String          @id
  productionOrderId String
  itemId            String
  qty               Decimal         @db.Decimal(16, 4)
  createdAt         DateTime        @default(now())
  Item              Item            @relation(fields: [itemId], references: [id])
  ProductionOrder   ProductionOrder @relation(fields: [productionOrderId], references: [id], onDelete: Cascade)
}

model ProductionOrder {
  id                    String                  @id
  poNumber              String                  @unique
  recipeId              String
  userId                String
  plannedQty            Decimal                 @db.Decimal(16, 4)
  actualQty             Decimal                 @default(0) @db.Decimal(16, 4)
  status                String                  @default("draft")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  ProductionConsumption ProductionConsumption[]
  Recipe                Recipe                  @relation(fields: [recipeId], references: [id])
  User                  User                    @relation(fields: [userId], references: [id])
  ProductionOutput      ProductionOutput[]
}

model ProductionOutput {
  id                String          @id
  productionOrderId String
  itemId            String
  qty               Decimal         @db.Decimal(16, 4)
  createdAt         DateTime        @default(now())
  Item              Item            @relation(fields: [itemId], references: [id])
  ProductionOrder   ProductionOrder @relation(fields: [productionOrderId], references: [id], onDelete: Cascade)
}

model PurchaseOrder {
  id                String              @id
  poNumber          String              @unique
  supplierId        String
  status            String              @default("draft")
  poDate            DateTime            @default(now())
  expectedDate      DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  GoodsReceiptNote  GoodsReceiptNote?
  Supplier          Supplier            @relation(fields: [supplierId], references: [id])
  PurchaseOrderLine PurchaseOrderLine[]
}

model PurchaseOrderLine {
  id            String        @id
  poId          String
  itemId        String
  qty           Decimal       @db.Decimal(16, 4)
  unitPrice     Decimal       @db.Decimal(12, 2)
  totalAmount   Decimal       @db.Decimal(16, 2)
  createdAt     DateTime      @default(now())
  Item          Item          @relation(fields: [itemId], references: [id])
  PurchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
}

model Recipe {
  id              String            @id
  code            String            @unique
  name            String
  description     String?
  yieldQty        Decimal           @default(1) @db.Decimal(16, 4)
  yieldUom        String            @default("piece")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  ProductionOrder ProductionOrder[]
  RecipeLine      RecipeLine[]
}

model RecipeLine {
  id        String   @id
  recipeId  String
  itemId    String
  qty       Decimal  @db.Decimal(16, 4)
  uom       String
  createdAt DateTime @default(now())
  Item      Item     @relation(fields: [itemId], references: [id])
  Recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model RoomCharge {
  id          String   @id
  folioId     String
  description String
  amount      Decimal  @db.Decimal(16, 2)
  category    String
  createdAt   DateTime @default(now())
  Folio       Folio    @relation(fields: [folioId], references: [id], onDelete: Cascade)
}

model StockBatch {
  id          String        @id
  itemId      String
  lotNumber   String?
  expiryDate  DateTime?
  receivedAt  DateTime      @default(now())
  qtyOnHand   Decimal       @default(0) @db.Decimal(16, 4)
  costPrice   Decimal       @db.Decimal(12, 2)
  createdAt   DateTime      @default(now())
  warehouseId String
  Item        Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  Warehouse   Warehouse     @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  StockLedger StockLedger[]
}

model StockCount {
  id             String           @id
  countNumber    String           @unique
  warehouseId    String
  status         String           @default("scheduled")
  countDate      DateTime         @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Warehouse      Warehouse        @relation(fields: [warehouseId], references: [id])
  StockCountLine StockCountLine[]
}

model StockCountLine {
  id          String     @id
  countId     String
  itemId      String
  physical    Decimal    @db.Decimal(16, 4)
  system      Decimal    @db.Decimal(16, 4)
  createdAt   DateTime   @default(now())
  warehouseId String
  StockCount  StockCount @relation(fields: [countId], references: [id], onDelete: Cascade)
}

model StockLedger {
  id           String      @id
  itemId       String
  warehouseId  String
  batchId      String?
  movementType String
  reference    String?
  qty          Decimal     @db.Decimal(16, 4)
  costAmount   Decimal     @default(0) @db.Decimal(16, 2)
  createdAt    DateTime    @default(now())
  StockBatch   StockBatch? @relation(fields: [batchId], references: [id])
  Item         Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  Warehouse    Warehouse   @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
}

model StockTransfer {
  id                String              @id
  transferNumber    String              @unique
  fromWarehouseId   String
  toWarehouseId     String
  userId            String
  status            String              @default("draft")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  Warehouse         Warehouse           @relation(fields: [fromWarehouseId], references: [id])
  User              User                @relation(fields: [userId], references: [id])
  StockTransferLine StockTransferLine[]
}

model StockTransferLine {
  id            String        @id
  transferId    String
  itemId        String
  qty           Decimal       @db.Decimal(16, 4)
  createdAt     DateTime      @default(now())
  StockTransfer StockTransfer @relation(fields: [transferId], references: [id], onDelete: Cascade)
}

model Supplier {
  id            String          @id
  code          String          @unique
  name          String
  contact       String?
  createdAt     DateTime        @default(now())
  PurchaseOrder PurchaseOrder[]
}

model SyncQueue {
  id             String    @id
  idempotencyKey String    @unique
  operation      String
  entityId       String?
  entityType     String?
  payload        Json
  status         String    @default("pending")
  retryCount     Int       @default(0)
  createdAt      DateTime  @default(now())
  processedAt    DateTime?
}

model SystemSettings {
  id        String   @id
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model TableArea {
  id          String        @id
  code        String        @unique
  name        String
  createdAt   DateTime      @default(now())
  DineInTable DineInTable[]
}

model Tax {
  id        String   @id
  code      String   @unique
  name      String
  rate      Decimal  @db.Decimal(5, 2)
  createdAt DateTime @default(now())
}

model User {
  id              String            @id
  email           String            @unique
  name            String?
  password        String?
  role            String            @default("staff")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  PosOrder        PosOrder[]
  ProductionOrder ProductionOrder[]
  StockTransfer   StockTransfer[]
}

model Warehouse {
  id            String          @id
  code          String          @unique
  name          String
  type          String          @default("storage")
  createdAt     DateTime        @default(now())
  StockBatch    StockBatch[]
  StockCount    StockCount[]
  StockLedger   StockLedger[]
  StockTransfer StockTransfer[]
}
